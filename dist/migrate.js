// Generated by CoffeeScript 1.9.3
(function() {
  var Migrate, arrayDiff, colors, currentPath, execSync, fs, migrationsPath;

  fs = require('fs');

  colors = require('colors');

  execSync = require('child_process').execSync;

  arrayDiff = require('./array_diff');

  currentPath = fs.realpathSync('.');

  migrationsPath = currentPath + '/migrations';

  Migrate = (function() {
    function Migrate() {}

    Migrate.prototype.getAllMigrations = function() {
      return fs.readdirSync(migrationsPath).filter(function(file) {
        return file.indexOf('.sh') !== -1;
      });
    };

    Migrate.prototype.getMigrated = function() {
      if (!fs.existsSync(migrationsPath + '/.migrated')) {
        console.log('File ' + migrationsPath + '/.migrated not found, something is wrong in your configs or you forgot to run: shellmigration init');
        process.exit();
      }
      return fs.readFileSync(migrationsPath + '/.migrated', 'utf8').split('\n').filter(function(file) {
        file = file.trim();
        return file !== '' && fs.existsSync(migrationsPath + '/' + file);
      });
    };

    Migrate.prototype.getMigrations = function() {
      return arrayDiff(this.getAllMigrations(), this.getMigrated());
    };

    Migrate.prototype.isMigrated = function(file) {
      return this.getMigrated().indexOf(file) !== -1;
    };

    Migrate.prototype.init = function() {
      var path;
      path = fs.realpathSync(__dirname);
      fs.mkdirSync(migrationsPath);
      fs.createReadStream(path + '/stubs/shellmigration.json').pipe(fs.createWriteStream(currentPath + '/shellmigration.json'));
      fs.createReadStream(path + '/stubs/gitignore').pipe(fs.createWriteStream(migrationsPath + '/.gitignore'));
      return fs.createReadStream(path + '/stubs/migrated').pipe(fs.createWriteStream(migrationsPath + '/.migrated'));
    };

    Migrate.prototype.run = function() {
      var file, index, migrated, migrations;
      migrated = this.getMigrated();
      migrations = this.getMigrations();
      if (!migrated.length && !migrations.length) {
        console.log(colors.red('No migrations.'));
        process.exit();
      } else if (!migrations.length) {
        console.log(colors.green('You are up to date, good job!'));
        process.exit();
      }
      for (index in migrations) {
        file = migrations[index];
        console.log('Running migration:', file);
        console.log(execSync('sh ' + file, {
          cwd: migrationsPath,
          encoding: 'utf8'
        }));
        fs.appendFileSync(migrationsPath + '/.migrated', file + '\n');
      }
      return console.log(colors.green('Everything is finished, ' + migrations.length + ' migrations where ran successfully.'));
    };

    Migrate.prototype.list = function(type) {
      var file, index, message, migrations, output, results;
      if (type === 'done') {
        message = 'All migrations ran:\n';
        migrations = this.getMigrated();
      } else if (type === 'do') {
        message = 'All migrations to be ran:\n';
        migrations = this.getMigrations();
      } else {
        message = 'All migrations:\n';
        migrations = this.getAllMigrations();
      }
      console.log(message);
      results = [];
      for (index in migrations) {
        file = migrations[index];
        output = file;
        if (type === 'all' && this.isMigrated(file)) {
          output = file + ' (migrated)';
        }
        results.push(console.log(output));
      }
      return results;
    };

    return Migrate;

  })();

  module.exports = (function(dir, alias) {
    return new Migrate;
  })();

}).call(this);
