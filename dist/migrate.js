// Generated by CoffeeScript 1.9.3
(function() {
  var colors, execSync, fs;

  fs = require('fs');

  colors = require('colors');

  execSync = require('child_process').execSync;

  module.exports = (function(dir, alias) {
    var arrayDiff, currentPath, migrationsPath;
    currentPath = fs.realpathSync('.');
    migrationsPath = currentPath + '/migrations';
    arrayDiff = function(a1, a2) {
      var i;
      var a, diff, i, k;
      a = [];
      diff = [];
      i = 0;
      while (i < a1.length) {
        a[a1[i]] = true;
        i++;
      }
      i = 0;
      while (i < a2.length) {
        if (a[a2[i]]) {
          delete a[a2[i]];
        } else {
          a[a2[i]] = true;
        }
        i++;
      }
      for (k in a) {
        diff.push(k);
      }
      return diff;
    };
    return {
      getAllMigrations: function() {
        return fs.readdirSync(migrationsPath).filter(function(file) {
          return file.indexOf('.sh') !== -1;
        });
      },
      getMigrated: function() {
        if (!fs.existsSync(migrationsPath + '/.migrated')) {
          console.log('File ' + migrationsPath + '/.migrated not found, something is wrong in your configs or you forgot to run: shellmigration init');
          process.exit();
        }
        return fs.readFileSync(migrationsPath + '/.migrated', 'utf8').split('\n').filter(function(file) {
          file = file.trim();
          return file !== '' && fs.existsSync(migrationsPath + '/' + file);
        });
      },
      getMigrations: function() {
        return arrayDiff(this.getAllMigrations(), this.getMigrated());
      },
      init: function() {
        var path;
        path = fs.realpathSync(__dirname);
        fs.mkdirSync(currentPath + '/migrations');
        fs.createReadStream(path + '/stubs/shellmigration.json').pipe(fs.createWriteStream('./shellmigration.json'));
        fs.createReadStream(path + '/stubs/gitignore').pipe(fs.createWriteStream(currentPath + '/migrations/.gitignore'));
        fs.createReadStream(path + '/stubs/migrated').pipe(fs.createWriteStream(currentPath + '/migrations/.migrated'));
      },
      run: function() {
        var file, migrated, migrations, x;
        migrated = this.getMigrated();
        migrations = this.getMigrations();
        if (!migrated.length && !migrations.length) {
          console.log(colors.red('No migrations.'));
          process.exit();
        } else if (!migrations.length) {
          console.log(colors.green('You are up to date, good job!'));
          process.exit();
        }
        for (x in migrations) {
          x = x;
          file = migrations[x];
          console.log('Running migration:', file);
          console.log(execSync('sh ' + file, {
            cwd: migrationsPath,
            encoding: 'utf8'
          }));
          fs.appendFileSync(migrationsPath + '/.migrated', file + '\n');
        }
        console.log(colors.green('Everything is finished, ' + migrations.length + ' migrations where ran successfully.'));
      }
    };
  })();

}).call(this);
